package de.district.api.experimental.random;

/**
 * <p>
 * The {@code MarsagliaPolarGaussian} class implements the Marsaglia polar method for generating
 * Gaussian (normally) distributed random numbers. This method is an efficient way to generate
 * pairs of independent standard normally distributed random numbers, and it works by transforming
 * uniformly distributed random numbers.
 * </p>
 *
 * <p>
 * This class leverages a {@link RandomSource} to generate the underlying random numbers,
 * ensuring that the Gaussian distribution is generated based on a high-quality, uniform random source.
 * </p>
 *
 * <p>
 * <b>Usage Example:</b>
 * <pre>{@code
 * RandomSource randomSource = ...; // Implementation of RandomSource
 * MarsagliaPolarGaussian gaussianGenerator = new MarsagliaPolarGaussian(randomSource);
 * double gaussianValue = gaussianGenerator.nextGaussian();
 * }</pre>
 * </p>
 *
 * <p>
 * <b>Implementation Details:</b> The Marsaglia polar method generates two Gaussian-distributed
 * random numbers at a time, storing one for future use. This class manages this process
 * internally and ensures that subsequent calls to {@link #nextGaussian()} return a new value
 * each time.
 * </p>
 *
 * @since 1.0.0
 * @author Erik Pf√∂rtner
 * @see RandomSource
 * @see Mth
 */
public class MarsagliaPolarGaussian {

    /**
     * The underlying source of randomness used to generate uniform random numbers.
     */
    public final RandomSource randomSource;

    /**
     * Stores the second Gaussian value generated by the Marsaglia polar method
     * for the next invocation of {@link #nextGaussian()}.
     */
    private double nextNextGaussian;

    /**
     * Flag indicating whether the next Gaussian value is already available
     * (i.e., whether {@link #nextNextGaussian} contains a valid value).
     */
    private boolean haveNextNextGaussian;

    /**
     * Constructs a new {@code MarsagliaPolarGaussian} generator using the specified
     * {@link RandomSource}.
     *
     * @param randomSource the random source used to generate uniform random numbers.
     */
    public MarsagliaPolarGaussian(final RandomSource randomSource) {
        this.randomSource = randomSource;
    }

    /**
     * Resets the internal state of the Gaussian generator.
     *
     * <p>
     * This method clears any stored Gaussian value, forcing the next call to {@link #nextGaussian()}
     * to generate a new pair of Gaussian-distributed values.
     * </p>
     */
    public void reset() {
        this.haveNextNextGaussian = false;
    }

    /**
     * Generates the next Gaussian (normally) distributed random value with mean 0.0 and standard deviation 1.0.
     *
     * <p>
     * This method uses the Marsaglia polar method to generate the Gaussian value.
     * It either returns a previously generated Gaussian value (if available) or
     * generates a new pair of values.
     * </p>
     *
     * @return the next Gaussian-distributed random value.
     */
    public double nextGaussian() {
        if (this.haveNextNextGaussian) {
            // Return the stored Gaussian value
            this.haveNextNextGaussian = false;
            return this.nextNextGaussian;
        } else {
            double u, v, s;
            do {
                // Generate two independent uniform random variables within the unit circle
                u = 2.0 * this.randomSource.nextDouble() - 1.0;
                v = 2.0 * this.randomSource.nextDouble() - 1.0;
                s = Mth.square(u) + Mth.square(v);
            } while (s >= 1.0 || s == 0.0);

            // Apply the Marsaglia transformation to obtain the Gaussian value
            double multiplier = Math.sqrt(-2.0 * Math.log(s) / s);
            this.nextNextGaussian = v * multiplier;  // Store the second Gaussian value
            this.haveNextNextGaussian = true;        // Indicate that we have a stored value
            return u * multiplier;                   // Return the first Gaussian value
        }
    }
}
